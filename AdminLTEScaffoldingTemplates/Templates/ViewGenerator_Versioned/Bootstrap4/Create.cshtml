@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<h1>@Model.ViewName</h1>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }


@:<div class="content-wrapper" style="min-height: 1345.6px;">

    @:<section class="content-header">
    @:<div class="container-fluid">
            @:<div class="row mb-2">
                @:<div class="col-sm-6">
                    @:<h1>@Model.ViewDataTypeShortName</h1>
                @:</div>
            @:</div>
        @:</div>
    @:</section>
    @:<section class="content">
        @:<div class="container-fluid">
		
            @:<div class="row">
                @:<div class="col-lg-6">
                        @:<div class="card card-primary">
                         @:<div class="card-header">
                             @:<h3 class="card-title">Add New @Model.ViewDataTypeShortName</h3>
                         @:</div>

                          @:<form asp-action="@Model.ViewName">
                            @:<div asp-validation-summary="ModelOnly" class="text-danger"/>
                            @:<div class="card-body">
                                @foreach (var property in Model.ModelMetadata.Properties)
                                {                                   
                                    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
                                    {

                                        if (property.IsForeignKey)
                                        {
                                            @:<div class="form-group">
                                            @:<label>@property.PropertyName</label>
                                            @:<select asp-for="@property.PropertyName" class="form-control select2 select2-hidden-accessible" style="width: 100%;" aria-hidden="true" tabindex="-1" asp-items="ViewBag.@property.PropertyName">
                                            @:</select>
                                            @:</div>
                                            continue;
                                        }

                                        bool isCheckbox = property.TypeName.Equals("System.Boolean");
                                        if (isCheckbox)
                                        {  
                                            @:<div class="form-check">
                                            @:<input type="checkbox" class="form-check-input" id="@property.PropertyName" asp-for="@property.PropertyName"/>
                                            @:<label class="form-check-label"> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))</label>
                                            @:</div>
                                        }
                                        else if (property.IsEnum && !property.IsEnumFlags)
                                        {
                                            @:<div class="form-group">
                                            @:<label asp-for="@property.PropertyName" class="control-label"/>
                                            @:<select asp-for="@property.PropertyName" class="form-control"/>
                                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"/>
                                            @:</div>
                                        }
                                        else if (property.IsMultilineText)
                                        {
                                            @:<div class="form-group">
                                            @:<label asp-for="@property.PropertyName" class="control-label"/>
                                            @:<textarea asp-for="@property.PropertyName" class="form-control"/>
                                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"/>
                                            @:</div>
                                        }
                                        else
                                        { 
                                            @:<div class="input-group mb-3">
                                            @:<div class="input-group-prepend">
                                            @:<span class="input-group-text">@property.PropertyName</span>
                                            @:</div>
                                            @:<input asp-for="@property.PropertyName" class="form-control"/>
                                            @:<span asp-validation-for="@property.PropertyName" class="text-danger"/>
                                            @:</div>
                                        }                                      
                                    }
                                }  
						
                                
                                        <div class="form-group">
												<input type="submit" value="Create" class="btn btn-primary"/>
											</div>
                             @:</div>                        
                        @:</form>
                   


				   @:</div>              
                @:</div>
            @:</div>
            
            
            <div>
                <a asp-action="Index">Back to List</a>
            </div>
        @:</div>
    @:</section>
    		
@:</div>
}

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}


<script>
    $(document).ready(function() {
            $('select').select2();
    });
</script>









